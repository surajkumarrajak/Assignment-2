def skipRemainingStages = false
def week = [1:'Sunday', 2:'Monday', 3:'Tuesday', 4:'Wednesday', 5:'Thursday', 6:'Friday', 7:'Saturday']
pipeline{
    agent any
    environment {
        AWS_ACCOUNT_ID="270291036751"
        AWS_DEFAULT_REGION="us-east-2" 
        IMAGE_REPO_NAME="assignment-2"
        IMAGE_TAG="hello-world"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        TERRAFORM_DIR = "$WORKSPACE/terraform"
        
    }
    stages {
        stage ('initialize'){
            when {
                expression { week[new Date()[Calendar.DAY_OF_WEEK]] == 'Sunday'}
            }
            steps { 
                script {
                    sh '''
                        echo "This is sunday...No builds on weekend...Enjoy!!!"
                    '''
                    abort "This pipeline stops here! Its sunday---ENJOY!!!"
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh '''
                        echo "Initializing"
                    '''
                }
            }
        }
        stage('Check pods'){
            steps{
                script{
                    def podExist = sh(returnStdout: true, script: "sudo kubectl get pods hello-world")
                    sh '''
                        echo "${podExist}"
                    '''
                    if (podExist.contains("hello-world")) {
                        println("The line is found")
                        echo "existe"
                    }else{
                        error
                    }
                }
            }       
        }
        stage ('Build Application') {
            steps {
                sh 'mvn -f my-app/pom.xml clean package'
                sh """
                echo "Building Artefacts"
                """
            }
            post {
                success {
                    echo "Now Archiving the Artifacts...."
                    archiveArtifacts artifacts: '**/*.jar'
                }
            }
        }
        stage('Sonarqube') {
            environment {
                scannerHome = tool 'sonarqubescanner'
            }    
            steps {
                withSonarQubeEnv('sonarqube') {
                   sh """
                    echo ${scannerHome}/bin/sonar-scanner
                    ${scannerHome}/bin/sonar-scanner
                     """
                }      
               /* timeout(time: 10, unit: 'MINUTES') {
                 waitForQualityGate abortPipeline: true
                } */
            }
        }
       
       /* stage('Create Tomcat Docker Image'){
            steps {
                sh "pwd"
                sh "ls -a"
                sh "docker build . -t mavenhelloworld:${env.BUILD_ID}"
            }
        }
          /*stage('Building our image') { 
            steps { 
                script { 
                    dockerImage = docker.build registry + ":$BUILD_NUMBER" 
                }
            }
        }
        stage('Create&Push image-ECR') { 
            steps { 
                script { 
                    docker.withRegistry( 'https://2702-9103-6751.dkr.ecr.us-east-2.amazonaws.com', 'ecr:us-east-2:my.aws.credentials' ) { 
                        def myImage = docker.build('assignment-2')
                        myImage.push('lts')
                    }
                }
            }*/
        stage('Building image') {
            steps{
                script {
                    dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }
        stage('Logging into AWS ECR') {
            steps {
                script {
                sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                }
                 
            }
        }   
        
        /*stage('Push image') {
            steps {
                withDockerRegistry([url: "https://${REPOSITORY_URI}",credentialsId: "ecr:${AWS_DEFAULT_REGION}:my.aws.credentials"]) {
                sh "docker push ${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }*/

    // Uploading Docker images into AWS ECR
        stage('Pushing image to ECR') {
            steps{  
                script {
                    sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"
                    sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                }
            }
            post {
                success{
                    emailext (
                        from: 'robotm095@gmail.com',
                        to: 'surajkumarrajak14@gmail.com,robotm095@gmail.com,sdeeksha167@gmail.com',
                        subject: "Status of pipeline: ${currentBuild.fullDisplayName}",
                        body: "${env.BUILD_URL} has result ${currentBuild.result} and pushed to ecr repo"
                        )
                }
            }

        }
        stage('Terraform files push - s3'){
            steps{
                script{
                    sh "aws s3 cp /home/lab/Assignment-2/terraform/ s3://assignment-2-s3/ --recursive"
                }
            }
            post {
                success{
                    emailext (
                        from: 'robotm095@gmail.com',
                        to: 'surajkumarrajak14@gmail.com,robotm095@gmail.com,sdeeksha167@gmail.com',
                        subject: "Deployment Approval: ${currentBuild.fullDisplayName}",
                        body: "EKS provisioned successfully, please go to the url ${env.BUILD_URL} to approve for application deployment"
                        )
                }
            }
        }
       /* stage('EKS Provision') {
            steps {
                dir("terraform"){
                    sh 'terraform init'
                    sh 'terraform plan -out=output.txt'
                    sh 'terraform apply output.txt'
                }
            }
            

        }*/
        stage('Approval') {
            // no agent, so executors are not used up when waiting for approvals
            agent none
            steps {
                script {
                    def deploymentDelay = input id: 'Deploy', message: 'Deploy to EKS?', submitter: 'suraj,DevOps', parameters: [choice(choices: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24'], description: 'Hours to delay deployment?', name: 'deploymentDelay')]
                    sleep time: deploymentDelay.toInteger(), unit: 'HOURS'
                }
            }
        }

    
        stage('App Deploy-EKS') {
            steps{
                script{
                    def podExist = sh(script: "sudo kubectl get pods hello-world", returnStdout: true) == 0
                    echo '$podExist'
                    if(!podExist){
                        kubernetesDeploy(
                            configs: 'app-deploy.yaml',
                            kubeconfigId: 'k8s',
                            enableConfigSubstitution: true
                        )
                    }

                }
            }   
        }
        /*stage('Expose to LB-EKS') {
            steps{
                kubernetesDeploy(
                    configs: 'app-service.yaml',
                    kubeconfigId: 'k8s',
                    enableConfigSubstitution: true
                )
                
            }    
        }
        stage('Sample Deploy-EKS') {
            steps{
                kubernetesDeploy(
                    configs: 'yeasy-deploy.yaml',
                    kubeconfigId: 'k8s',
                    enableConfigSubstitution: true
                )
                
            }    
        }
        stage('Sample Expose to LB-EKS') {
            steps{
                kubernetesDeploy(
                    configs: 'yeasy-service.yaml',
                    kubeconfigId: 'k8s',
                    enableConfigSubstitution: true
                )
                
            }    
        }*/
        stage('last'){
            steps{
                script{
                    sh"""
                    echo "end of pipeline"
                    """
                }
            }
        }
    }
}
