pipeline{
    agent any
    environment {
        AWS_ACCOUNT_ID="259447875661"
        AWS_DEFAULT_REGION="us-east-2" 
        IMAGE_REPO_NAME="assignment-2"
        /*IMAGE_TAG="lts"*/
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
    }
    stages {
        stage ('initialize'){
            steps {
                sh '''
                    echo "Initializing"
                ''' 
            }
        }
        stage ('Build Application') {
            steps {
                sh 'mvn -f my-app/pom.xml clean package'
                sh """
                echo "Building Artefacts"
                """
            }
            post {
                success {
                    echo "Now Archiving the Artifacts...."
                    archiveArtifacts artifacts: '**/*.jar'
                }
            }
        }
        stage('Sonarqube') {
            environment {
                scannerHome = tool 'sonarqubescanner'
            }    
            steps {
                withSonarQubeEnv('sonarqube') {
                   sh """
                    echo ${scannerHome}/bin/sonar-scanner
                    ${scannerHome}/bin/sonar-scanner
                     """
                }      
               /* timeout(time: 10, unit: 'MINUTES') {
                 waitForQualityGate abortPipeline: true
                } */
            }
        }
        /*stage('Save artifacts') {
            steps {
                
                archiveArtifacts artifacts: '***.jar', fingerprint: true
            }
        }
       /* stage('Create Tomcat Docker Image'){
            steps {
                sh "pwd"
                sh "ls -a"
                sh "docker build . -t mavenhelloworld:${env.BUILD_ID}"
            }
        }
        stage('Deploy Image') {
            steps{
                script {
                    docker.withRegistry( '', registryCredential ) {
                    dockerImage.push()
                    }
                }
            }
         } */
          /*stage('Building our image') { 
            steps { 
                script { 
                    dockerImage = docker.build registry + ":$BUILD_NUMBER" 
                }
            }
        }
        stage('Create&Push image-ECR') { 
            steps { 
                script { 
                    docker.withRegistry( 'https://2702-9103-6751.dkr.ecr.us-east-2.amazonaws.com', 'ecr:us-east-2:my.aws.credentials' ) { 
                        def myImage = docker.build('assignment-2')
                        myImage.push('lts')
                    }
                }
            }*/
        /*stage('Logging into AWS ECR') {
            steps {
                script {
                sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                }
                 
            }
        }  */  
        stage('Building image') {
            steps{
                script {
                    dockerImage = docker.build "test:${IMAGE_TAG}"
                }
            }
        }
        stage('Push image') {
            steps {
                withDockerRegistry([url: "https://${REPOSITORY_URI}",credentialsId: "ecr:${AWS_DEFAULT_REGION}:my.aws.credentials.pers"]) {
                sh "docker push ${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                }
            }
        }

    // Uploading Docker images into AWS ECR
        /*stage('Pushing to ECR') {
            steps{  
                script {
                    sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"
                    sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                }
            }
            post {
                always {
                    emailext (
                        from: 'robotm095@gmail.com',
                        to: 'surajkumarrajak14@gmail.com,robotm095@gmail.com,sdeeksha167@gmail.com',
                        subject: "Status of pipeline: ${currentBuild.fullDisplayName}",
                        body: "${env.BUILD_URL} has result ${currentBuild.result} and pushed to ecr repo"
                        )
                }
            }

        }*/
    }
}
